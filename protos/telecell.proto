// Our main product

syntax = "proto3";

package lighting.telecell;

import "location.proto";
import "ts.proto";
import "element.proto";
import "basestation.proto";
import "asset.proto";

service Telecell {
    rpc GetTelecell (Request) returns (Reply);

    rpc ListTelecells (ListRequest) returns (stream List);

    rpc SearchElements (lighting.location.FilterByLocationRequest) returns (stream Reply);

    // TODO #10: add RPCs to create and update TCs.
}

message ListRequest {
    int32 limit = 1;
    int32 offset = 2;
}

message List {
    repeated Reply telecells = 1;
}

message Request {
    oneof telecell_id {
        int32 id = 1;
        int32 uuid = 2;
    }
}

message Reply {
    // unique identifier within system
    int32 id = 1;

    // globally unique identifier, unique across all systems
    int64 uuid = 2;

    // does this telecell act as a relay? i.e. is it forwarding the signals from other TCs to the BS?
    bool relay = 3;

    // details of Basestation this TC is connected to.
    lighting.basestation.Reply basestation = 4;

    // how is this TC doing?
    ActivityStatus status = 5;

    // when was this TC's status last updated?
    lighting.ts.Timestamp updated_at = 6;

    // details of connected elements to this TC
    repeated lighting.element.Reply elements = 7;

    // details of the asset this TC is connected to.
    lighting.asset.Reply asset = 8;

    // where is this telecell? preferably the GPS coords...
    lighting.location.Location location = 15;
}

enum ActivityStatus {
    UNAVAILABLE = 0;
    ACTIVE = 1;
    INACTIVE = 2;
}